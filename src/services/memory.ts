'use server';

import { initializeApp, getApps, getApp } from "firebase/app";
import { getFirestore, collection, addDoc, serverTimestamp } from "firebase/firestore";

// Your web app's Firebase configuration
const firebaseConfig = {
  apiKey: "AIzaSyC49VxyC3JueZsAOc6nRpJ3RL5nC-DXD6Y",
  authDomain: "reva-smart-chat-assistant.firebaseapp.com",
  projectId: "reva-smart-chat-assistant",
  storageBucket: "reva-smart-chat-assistant.appspot.com",
  messagingSenderId: "36858353085",
  appId: "1:36858353085:web:28e6e8b644a3e44e932ed4"
};

// Initialize Firebase
let app;
if (getApps().length === 0) {
    app = initializeApp(firebaseConfig);
} else {
    app = getApp();
}

const db = getFirestore(app);

/**
 * Saves a user's chat input and the AI's response to the training memory.
 * @param chatInput The original message from the user.
 * @param response The response generated by the AI.
 */
export async function saveToTrainingMemory(chatInput: string, response: string): Promise<void> {
    if (!firebaseConfig.projectId) {
        console.log("Firebase config not found, skipping database write.");
        return;
    }

    try {
        console.log("Attempting to write to Firestore in collection 'training_memory'...");
        const docRef = await addDoc(collection(db, "training_memory"), {
            chatInput: chatInput,
            response: response,
            createdAt: serverTimestamp(),
        });
        console.log("Document successfully written with ID: ", docRef.id);
    } catch (error) {
        console.error("--- ERROR WRITING TO FIRESTORE ---");
        console.error("This is likely due to incorrect Firebase security rules.");
        console.error("Go to your Firebase project -> Firestore -> Rules and ensure they allow writes.");
        console.error("For testing, you can use these rules (valid for 30 days):");
        console.error(`
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    match /{document=**} {
      allow read, write: if request.time < timestamp.now() + duration.time(30, 'd');
    }
  }
}
        `);
        console.error("Full error object:", error);
    }
}

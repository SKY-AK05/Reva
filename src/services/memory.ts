'use server';

import { initializeApp, getApps, getApp } from "firebase/app";
import { getFirestore, collection, addDoc, serverTimestamp } from "firebase/firestore";

// Your web app's Firebase configuration
const firebaseConfig = {
  apiKey: process.env.NEXT_PUBLIC_FIREBASE_API_KEY,
  authDomain: process.env.NEXT_PUBLIC_FIREBASE_AUTH_DOMAIN,
  projectId: process.env.NEXT_PUBLIC_FIREBASE_PROJECT_ID,
  storageBucket: process.env.NEXT_PUBLIC_FIREBASE_STORAGE_BUCKET,
  messagingSenderId: process.env.NEXT_PUBLIC_FIREBASE_MESSAGING_SENDER_ID,
  appId: process.env.NEXT_PUBLIC_FIREBASE_APP_ID,
};

// Initialize Firebase
const app = !getApps().length ? initializeApp(firebaseConfig) : getApp();
const db = getFirestore(app);

/**
 * Saves a user's chat input and the AI's response to the training memory.
 * @param chatInput The original message from the user.
 * @param response The response generated by the AI.
 */
export async function saveToTrainingMemory(chatInput: string, response: string): Promise<void> {
    if (!firebaseConfig.projectId) {
        console.log("Firebase config not found, skipping database write.");
        return;
    }

    try {
        console.log("Attempting to write to Firestore in collection 'training_memory'...");
        const docRef = await addDoc(collection(db, "training_memory"), {
            chatInput: chatInput,
            response: response,
            createdAt: serverTimestamp(),
        });
        console.log("Document successfully written with ID: ", docRef.id);
    } catch (error) {
        console.error("--- ERROR WRITING TO FIRESTORE ---");
        console.error("This is likely due to incorrect Firebase security rules.");
        console.error("Go to your Firebase project -> Firestore -> Rules and ensure they allow writes.");
        console.error("For testing, you can use these rules (valid for 30 days):");
        console.error(`
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    match /{document=**} {
      allow read, write: if request.time < timestamp.date(2024, 11, 25);
    }
  }
}
        `);
        console.error("Full error object:", error);
    }
}
